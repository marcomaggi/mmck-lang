\input texinfo.tex
@c %**start of header
@setfilename mmck-lang.info
@settitle @sc{mmck} Lang
@c %**end of header

@include version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Language extensions for @sc{chicken}

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    @sc{mmck} Lang

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           mmck-lang

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{mrc.mgg@@gmail.com}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2019

@set CHICKEN_VERSION            5.1.0

@c ------------------------------------------------------------

@set PackageStem                lang

@set PackageAutoconfPrefix      MMCK_LANG
@set PackagePkgconfigModule     mmck-lang

@set GithubUrl                  @url{https://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}
@set BitbucketUrl               @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}}
@set DownloadUrl                @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}/downloads}
@set DocumentationUrl           @url{https://marcomaggi.github.io/docs/@value{PACKAGE_NICKNAME}.html}

@c page
@c ------------------------------------------------------------
@c Local macros.
@c ------------------------------------------------------------

@macro mmck{}
@sc{mmck}
@end macro

@macro chicken{}
@sc{chicken}
@end macro

@c ------------------------------------------------------------------------

@macro ChickenCoreRef{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,chicken-core}
@end macro

@macro ChickenInternalsRef{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,chicken-internals}
@end macro

@macro MMCKExceptionalConditionsRef{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,mmck-exceptional-conditions}
@end macro

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @value{VERSION} of @value{PACKAGE}, a @chicken{} language package
implementing a extensions to the language.  @chicken{} is a Scheme--to--C compiler supporting the
language features as defined in the ``Revised^5 Report on Scheme''.

The library supports @posix{} platforms.  This package has been tested with @chicken{} version
@value{CHICKEN_VERSION}.

This package is distributed under the terms of the @gnu{} Lesser General Public License (@lgpl{}).

The latest release can be downloaded from:

@center @value{DownloadUrl}

@noindent
development takes place at:

@center @value{GithubUrl}

@noindent
and as backup at:

@center @value{BitbucketUrl}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the @gnu{}
Free Documentation License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being ``@gnu{} Free Documentation License'' and ``@gnu{} Lesser
General Public License'', no Front--Cover Texts, and no Back--Cover Texts.  A copy of the license is
included in the section entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @value{VERSION}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* mmck-lang: (mmck-lang).   A lang library for @chicken{}.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* version::                     Version functions.
* debug::                       Basic debugging facilities.
* binding::                     Binding syntaxes.
* expr::                        Expression syntaxes.
* booleans::                    Boolean functions.
* lists::                       List functions.
* vectors::                     Vector functions.
* strings::                     String functions.
* parameters::                  Parameter functions and syntaxes.

Appendices

* Package License::             GNU Lesser General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


@cindex @library{mmck lang}, library
@cindex Library @library{mmck lang}


This document describes version @value{VERSION} of @value{PACKAGE}, a @chicken{} language package
implementing extensions to the language.  @chicken{} is a Scheme-to-C compiler supporting the
language features as defined in the ``Revised^5 Report on Scheme''.

This package supports @posix{} platforms.  This package depends upon the @chicken{} egg
@code{matchable}.  This package depends upon the external packages: @mmck{} Exceptional Conditions.
To run the tests distributed with the source code: this package depends upon the package @mmck{}
Checks.

The package installs the library @library{mmck lang} along with its import library.  To require the
library and import its syntactic bindings in a module we can do:

@example
(declare (unit my-module)
         (emit-import-library my-module))

(require-library (mmck lang))

(module (my-module)
    ()
  (import (scheme)
          (mmck lang))

  ...

  #| end of module |# )
@end example

@c page
@node version
@chapter Version functions


@value{PACKAGE}'s version number follows the specification of @dfn{Semantic Versioning} version 2.0
as outlined at:

@center @url{https://semver.org/}

@noindent
the following functions are available to inspect the version specification at runtime.


@defun mmck-@value{PackageStem}-package-major-version
Return a fixnum representing the package's major version number.  As example, if the full semantic
version is @samp{1.2.3-devel.0+x86-64}: the major version number is the fixnum @samp{1}.
@end defun


@defun mmck-@value{PackageStem}-package-minor-version
Return a fixnum representing the package's minor version number.  As example, if the full semantic
version is @samp{1.2.3-devel.0+x86-64}: the minor version number is the fixnum @samp{2}.
@end defun


@defun mmck-@value{PackageStem}-package-patch-level
Return a fixnum representing the package's patch level number.  As example, if the full semantic
version is @samp{1.2.3-devel.0+x86-64}: the patch level number is the fixnum @samp{3}.
@end defun


@defun mmck-@value{PackageStem}-package-prerelease-tag
Return a string representing the package's prerelease tag.  As example, if the full semantic version
is @samp{1.2.3-devel.0+x86-64}: the prerelease tag is the string @samp{"devel.0"}.  This string may
be empty.
@end defun


@defun mmck-@value{PackageStem}-package-build-metadata
Return a string representing the package's build metadata.  As example, if the full semantic version
is @samp{1.2.3-devel.0+x86-64}: the build metadata is the string @samp{"x86-64"}.  This string may
be empty.  We need to remember that this specification segment must contain only @ascii{}
alphanumerics and hyphen @samp{[0-9A-Za-z-]}; underscores are @strong{not} allowed.
@end defun


@defun mmck-@value{PackageStem}-package-version
Return a string representing the package's version.  As example, if the full semantic version is
@samp{1.2.3-devel.0+x86-64}: the package version is the string @samp{"1.2.3-devel.0"}, without the
build metadata.
@end defun


@defun mmck-@value{PackageStem}-package-semantic-version
Return a string representing the package's semantic version.  As example, if the full semantic
version is @samp{1.2.3-devel.0+x86-64}: the package version is the string
@samp{"v1.2.3-devel.0+x86-64"}, notice the leading character @samp{v}.
@end defun

@c page
@node debug
@chapter Basic debugging facilities


@defun debug-print @var{obj} @dots{}
Gather all the @var{obj} values in a list and print it the value of @code{(current-error-port)},
followed by a newline character.
@end defun

@c page
@node binding
@chapter Binding syntaxes


@menu
* binding reexports::           Reexported syntactic bindings.
* binding vars::                Defining syntactic bindings for variables.
* binding syns::                Defining syntactic bindings for syntaxes.
@end menu

@c page
@node binding reexports
@section Reexported syntactic bindings


@cindex Reexported syntactic bindings
@findex @syntax{case-lambda}, reexported syntactic binding
@findex @syntax{receive}, reexported syntactic binding


The library @library{mmck lang} reexports the following syntactic bindings from @library{chicken
base}:

@lisp
case-lambda
receive
@end lisp

@c page
@node binding vars
@section Defining syntactic bindings for variables


@menu
* binding vars define*::             The syntax @syntax{define*}.
* binding vars case-define::         The syntax @syntax{case-define}.
* binding vars case-define*::        The syntax @syntax{case-define*}.
* binding vars receive-and-return::  The syntax @syntax{receive-and-return}.
@end menu

@c page
@node binding vars define*
@subsection The syntax @syntax{define*}


@cindex @syntax{__who__}, defined by @syntax{define*}


@deffn Syntax {define*} (@qvar{who} . @qvar{formals}) @qvaro{body} @qvar{body} @dots{}
@deffnx Syntax {define*} @qvar{who} @qvar{expr}
Similar to @syntax{define}.  Inject the unhygienic syntax @syntax{__who__} whose uses expand into
@code{(quote @qvar{who})} so that its region of visibility is the defined expression.  The first
form expands into something like:

@lisp
(define @qvar{who}
  (lambda @qvar{formals})
    (let-syntax ((__who__ (syntax-rules ()
                            ((_)
                             (quote @qvar{who})))))
      @qvaro{body} @qvar{body} @dots{}))
@end lisp

@noindent
the second form expands into something like:

@lisp
(define @qvar{who}
  (let-syntax ((__who__ (syntax-rules ()
                          ((_)
                           (quote @qvar{who})))))
    @qvar{expr}))
@end lisp
@end deffn


Let's see some basic usage examples:

@lisp
(begin
  (define* (doit1 a b)
    (list __who__ a b))

  (doit1 'A 'B))
@result{} (doit1 A B)

(begin
  (define* (doit2 a b . rest)
    (list (__who__) a b rest))

  (doit2 'A 'B 'C 'D 'E))
@result{} (doit2 A B (C D E))

(begin
  (define* (doit . args)
    (list (__who__) args))

  (doit 'A 'B 'C 'D 'E))
@result{} (doit (A B C D E))

(define* it
  (list (__who__) 1 2))

it      @result{} (it 1 2)
@end lisp

Now let's see how to build and raise an exceptional--condition object, as defined by
@library{chicken condition}, with @code{location} property:

@lisp
(import (scheme)
        (mmck lang)
        (prefix (chicken condition) chicken::))

(define* (raise-it)
  (chicken::abort
   (chicken::make-property-condition 'mine 'location (__who__))))

(chicken::condition-case
    (raise-it)
  (E (mine)
     (chicken::get-condition-property E 'mine 'location))
  (() #f))
@result{} raise-it
@end lisp

Now let's see how to build and raise an exceptional--condition object, as defined by @library{mmck
exceptional-conditions}, with a @condition{who} component:

@lisp
(import (scheme)
        (mmck lang)
        (mmck exceptional-conditions))

(define* (raise-it)
  (raise
   (condition (make-error)
              (make-who-condition (__who__)))))

(guard (E ((error? E)
           (condition-who E))
          (else #f))
  (raise-it))
@result{} raise-it
@end lisp

@c page
@node binding vars case-define
@subsection The syntax @syntax{case-define}


@deffn Syntax case-define @qvar{who} (@qvar{formals} @qvaro{body} @qvar{body} @dots{}) @dots{}
Define a function accepting multiple formals specifications.  Inject the unhygienic syntax
@syntax{__who__} whose uses expand into @code{(quote @qvar{who})} so that its region of visibility
is the defined expression.  Expands into:

@lisp
(define @qvar{who}
  (case-lambda
    (@qvar{formals} @qvaro{body} @qvar{body} @dots{})
    @dots{}))
@end lisp

@noindent
where @syntax{case-lambda} is the syntax exported by @library{chicken base}.
@end deffn


Usage examples:

@lisp
(case-define doit
  (()                   0)
  ((a)                  (list 1 a))
  ((a b)                (list 2 a b))
  ((a b c . rest)       (list '* a b c rest)))

(doit)                  @result{} 0
(doit 'A)               @result{} (1 A)
(doit 'A 'B)            @result{} (2 A B)
(doit 'A 'B 'C 'D 'E)   @result{} (* A B C (D E))
@end lisp

@c page
@node binding vars case-define*
@subsection The syntax @syntax{case-define*}


@cindex @syntax{__who__}, defined by @syntax{case-define*}


@deffn Syntax case-define* @qvar{who} (@qvar{formals} @qvaro{body} @qvar{body} @dots{}) @dots{}
Define a function accepting multiple formals specifications.  Expands to:

@lisp
(define @qvar{who}
  (case-lambda
    (@qvar{formals}
     (let-syntax ((__who__ (syntax-rules ()
                             ((_)
                              (quote @qvar{who})))))
       @qvaro{body} @qvar{body} @dots{}))
    @dots{}))
@end lisp

@noindent
where @syntax{case-lambda} is the syntax exported by @library{chicken base}.
@end deffn


Usage examples:

@lisp
(case-define* doit
  (()                   (list (__who__) 0))
  ((a)                  (list (__who__) 1 a))
  ((a b)                (list (__who__) 2 a b))
  ((a b c . rest)       (list (__who__) '* a b c rest)))

(doit)                  @result{} (doit 0)
(doit 'A)               @result{} (doit 1 A)
(doit 'A 'B)            @result{} (doit 2 A B)
(doit 'A 'B 'C 'D 'E)   @result{} (doit * A B C (D E))
@end lisp

@c page
@node binding vars receive-and-return
@subsection The syntax @syntax{receive-and-return}


@deffn Syntax receive-and-return @qvar{formals} @qvar{expr} @qvaro{body} @qvar{body} @dots{}
Evaluate @qvar{expr} and bind its return values to @qvar{formals}, as if @syntax{let-values} was
used; then, in the region of visibility of the formals, evaluate the @qvar{body} expressions.
Finally, return the values bound to the formals.
@end deffn


Usage examples:

@lisp
(receive-and-return (a)
    (list 1 2)
  (pretty-print a))
@result{} (1 2)
@print{} (1 2)

(receive-and-return (a b)
    (values 1 2)
  (pretty-print a))
@result{} 1 2
@print{} 1

(receive-and-return ()
    (values)
  (pretty-print 3))
@result{} #<unspecified>
@print{} 3
@end lisp

@c page
@node binding syns
@section Defining syntactic bindings for syntaxes


@menu
* binding syns define-syntax-rule::         The syntax @syntax{define-syntax-rule}.
* binding syns define-auxiliary-syntaxes::  The syntax @syntax{define-auxiliary-syntaxes}.
* binding syns auxiliary::                  Auxiliary syntaxes.
@end menu

@c page
@node binding syns define-syntax-rule
@subsection The syntax @syntax{define-syntax-rule}


@deffn Syntax define-syntax-rule (@qvar{name} . @qvar{formals}) @qvaro{expr} @qvar{expr} @dots{}
Define a macro with a single @syntax{syntax-rules} rule.  Expands to:

@lisp
(define-syntax @qvar{name}
  (syntax-rules ()
    ((_ . @qvar{formals})
     (begin @qvaro{expr} @qvar{expr} @dots{}))))
@end lisp
@end deffn


Usage examples:

@lisp
(internal-body
  (define-syntax-rule (doit a b)
    (list a b))

  (doit 1 2))
@result{} (1 2)

(internal-body
  (define-syntax-rule (doit)
    (list 1 2))

  (doit))
@result{} (1 2)

(internal-body
  (define-syntax-rule (doit ?a ?b . ?rest)
    (vector '?a '?b '?rest))

  (doit 1 2 3 4))
@result{} #(1 2 (3 4))
@end lisp

@c page
@node binding syns define-auxiliary-syntaxes
@subsection The syntax @syntax{define-auxiliary-syntaxes}


@deffn Syntax define-auxiliary-syntaxes @qvaro{name} @qvar{name} @dots{}
For each of the @qvar{name} define a syntax like:

@lisp
(define-syntax @qvar{name} (syntax-rules ()))
@end lisp

This is useful to define auxiliary syntaxes like the @syntax{else} used by the standard
@syntax{cond}.
@end deffn


Let's see how to use it with @syntax{syntax-rules}:

@lisp
(define-auxiliary-syntaxes ciao)

(define-syntax doit
  (syntax-rules (ciao)
    ((_ ciao)
     #t)
    ((_ ?thing)
     #f)))

(doit ciao)     @result{} #t
(doit hello)    @result{} #f
@end lisp

@noindent
now with @func{er-macro-transformer} and @func{match} from the @library{matchable} egg:

@lisp
(import-for-syntax (scheme)
                   (only (chicken syntax)
                         er-macro-transformer)
                   (only (matchable)
                         match))

(define-auxiliary-syntaxes ciao)

(define-syntax doit
  (er-macro-transformer
    (lambda (input-form.stx rename compare)
      (define %ciao (rename 'ciao))
      (define (ciao? obj)
        (compare %ciao obj))
      (match input-form.stx
        ((_ (? ciao?))
         #t)
        (_
         #f)))))

(doit ciao)     @result{} #t
(doit hello)    @result{} #f
@end lisp

@noindent
now with @func{ir-macro-transformer} and @func{match} from the @library{matchable} egg:

@lisp
(import-for-syntax (scheme)
                   (only (chicken syntax)
                         er-macro-transformer)
                   (only (matchable)
                         match))

(define-auxiliary-syntaxes ciao)

(define-syntax doit
  (ir-macro-transformer
    (lambda (input-form.stx inject compare)
      (define %ciao (inject 'ciao))
      (define (ciao? obj)
        (compare %ciao obj))
      (match input-form.stx
        ((_ (? ciao?))
         #t)
        (_
         #f)))))

(doit ciao)     @result{} #t
(doit hello)    @result{} #f
@end lisp

@c page
@node binding syns auxiliary
@subsection Auxiliary syntaxes


@deffn {Auxiliary Syntax} __who__
Defined in the expression/body of syntaxes like @syntax{define*}, @syntax{case-define*},
@syntax{named-lambda}.  It expands to the quoted name of the object being defined.

We can use the syntax @syntax{__who__} as value for the condition property @code{location}
(@ChickenCoreRef{condition srfi-12 condition, Condition objects}), or as value for the
@condition{who} condition object (@MMCKExceptionalConditionsRef{conditions types r6rs, Predefined
condition types compatible with @rnrs{6}}).
@end deffn

@c page
@node expr
@chapter Expression syntaxes


@menu
* expr named-lambda::           The syntax @syntax{named-lambda}.
* expr misc::                   Miscellaneous expression syntaxes.
* expr reexports::              Reexported syntactic bindings.
@end menu

@c page
@node expr named-lambda
@section The syntax @syntax{named-lambda}


@deffn Syntax named-lambda @qvar{who} @qvar{formals} @qvaro{body} @qvar{body} @dots{}
Similar to @syntax{lambda}.  Inject the unhygienic syntax @syntax{__who__} whose uses expand into
@code{(quote @qvar{who})} so that its region of visibility is the function body.  Expand into
something like:

@lisp
(lambda @qvar{formals}
  (let-syntax ((__who__ (syntax-rules ()
                          ((_)
                           (quote @qvar{who})))))
    @qvaro{body} @qvar{body} @dots{}))
@end lisp

We can use the variable @code{__who__} as value for the condition property @code{location}, or as
value for the @condition{who} condition object.
@end deffn


Usage examples:

@lisp
(define func
  (named-lambda the-func (a b)
    (list (__who__) a b)))

(func 1 2)      @result{} (the-func 1 2)
@end lisp

@c page
@node expr misc
@section Miscellaneous expression syntaxes


@deffn Syntax alist-var-cons! @qvar{alist-var} @qvar{key} @qvar{val}
Push a new entry into an association list.  Expand into:

@lisp
(set! @qvar{alist-var} (cons (cons @qvar{key} @qvar{val}) @qvar{alist-var}))
@end lisp
@end deffn


@deffn Syntax internal-body @qvaro{body} @qvar{body} @dots{}
Expand into:

@lisp
(let () @qvaro{body} @qvar{body} @dots{})
@end lisp
@end deffn


@deffn Syntax begin0 @qvar{expr} @qvaro{body} @qvar{body} @dots{}
Evaluate @qvar{expr} and save its return values; evaluate the @qvar{body} forms; finally return the
values returned by @qvar{expr}.

@lisp
(begin0
    (+ 1 2)
  (pretty-print 'here))
@result{} 3
@print{} here
@end lisp
@end deffn


@deffn Syntax begin-checks @qvaro{expr} @qvar{expr} @dots{}
Like @syntax{begin}, but wrap the whole form into the @chicken{} low--level operation
@syntax{##core#check}, so that: if unsafe compilation is enabled, the whole form expands to
no--operations.  @ChickenInternalsRef{checks unsafe, Including/excluding checks}.
@end deffn


@deffn Syntax xor @qvar{expr} @dots{}
Exclusive OR.
@end deffn

@c page
@node expr reexports
@section Reexported syntactic bindings


@cindex Reexported syntactic bindings
@findex @syntax{when}, reexported syntactic binding
@findex @syntax{unless}, reexported syntactic binding


The library @library{mmck lang} reexports the following syntactic bindings from @library{chicken
base}:

@lisp
when
unless
@end lisp

@c page
@node booleans
@chapter Boolean functions


@deffn Syntax boolean-true? @qvar{obj}
@deffnx Syntax boolean-false? @qvar{obj}
Predicates for the boolean objects @true{} and @false{}.
@end deffn

@c page
@node lists
@chapter List functions


@menu
* lists cons::                  List constructors.
@end menu

@c page
@node lists cons
@section List constructors




@c page
@node vectors
@chapter Vector functions


@menu
* vectors unsafe::              Unsafe operations on vectors.
@end menu

@c page
@node vectors unsafe
@section Unsafe operations on vectors


@deffn {Unsafe Operation} $vector-length @var{vec}
The argument @var{vec} must be a vector object.  Return a non--negative fixnum representing the
length of the vector @var{vec}.
@end deffn


@deffn {Unsafe Operation} $vector-ref @var{vec} @var{fxidx}
The argument @var{vec} must be a vector object.  The argument @var{fxidx} must be a non--negative
integer representing a valid index in the vector @var{vec}.  Return the object at index @var{fxidx}
in the vector @var{vec}.
@end deffn


@deffn {Unsafe Operation} $vector-set! @var{vec} @var{fxidx} @var{obj}
The argument @var{vec} must be a vector object.  The argument @var{fxidx} must be a non--negative
integer representing a valid index in the vector @var{vec}.  Store the object @var{obj} at index
@var{fxidx} in the vector @var{vec}; return unspecified values.
@end deffn


@deffn {Unsafe Operation} $vector-set-immediate! @var{vec} @var{fxidx} @var{imm-obj}
The argument @var{vec} must be a vector object.  The argument @var{fxidx} must be a non--negative
integer representing a valid index in the vector @var{vec}.  Store the immediate object
@var{imm-obj} at index @var{fxidx} in the vector @var{vec}; return unspecified values.  This
operation is a bit faster than @func{$vector-set!}.
@end deffn


@c page
@node strings
@chapter String functions


@menu
* strings unsafe::              Unsafe operations on strings.
@end menu

@c page
@node strings unsafe
@section Unsafe operations on strings


@deffn {Unsafe Operation} $string-length @var{str}
The argument @var{str} must be a string object.  Return a non--negative fixnum representing the
length of the string @var{str}.
@end deffn

@c page
@node parameters
@chapter Parameter functions and syntaxes


The library @library{mmck lang} reexports from @library{chicken base} some syntactic bindings
forming the parameters @api{}, @ChickenCoreRef{base parms, Parameters}.


@deffn Syntax parameterize ((@qvar{param} @qvar{param-expr}) @dots{}) @qvaro{expr} @qvar{expr} @dots{}
@deffnx Syntax parameterise ((@qvar{param} @qvar{param-expr}) @dots{}) @qvaro{expr} @qvar{expr} @dots{}
The syntactic binding @syntax{parameterize} is reexported from @library{chicken base}.  The
syntactic binding @syntax{parameterise} is an alias for @syntax{parameterize}.
@end deffn


@defun make-parameter @var{obj}
@defunx make-parameter @var{obj} @var{guard}
Build a new parameter.  It is reexported from @library{chicken base}.
@end defun

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include lgpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @value{DocumentationUrl}

@noindent
the latest release of this package can be downloaded from:

@center @value{DownloadUrl}

@noindent
development takes place at:

@center @value{GithubUrl}

@noindent
and as backup at:

@center @value{BitbucketUrl}

@noindent
@chicken{} can be downloaded from:

@center @url{http://www.call-cc.org/}

@noindent
the package @mmck{} Lang is available from:

@center @url{https://github.com/marcomaggi/mmck-lang/}

@noindent
the package @mmck{} Checks is available from:

@center @url{https://github.com/marcomaggi/mmck-checks/}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function

@printindex fn

@node variable index
@appendix An entry for each variable

@printindex vr

@node type index
@appendix An entry for each type

@printindex tp

@contents
@bye

@c end of file
@c Local Variables:
@c ispell-local-dictionary: "en_GB-ise-w_accents"
@c end:
